/**
 * üè¢ MODELO DE UBICACIONES - CYBER SAPO
 * 
 * Este archivo es como un "ESPECIALISTA EN UBICACIONES" que sabe todo sobre:
 * - C√≥mo registrar nuevas ubicaciones donde instalar m√°quinas
 * - C√≥mo buscar y filtrar ubicaciones por pa√≠s, ciudad, tipo de negocio
 * - C√≥mo obtener estad√≠sticas de rendimiento por ubicaci√≥n
 * - C√≥mo gestionar la informaci√≥n de contacto y detalles de cada lugar
 * 
 * CONEXI√ìN CON LA BASE DE DATOS:
 * Este modelo se conecta con la tabla "locations" y se relaciona con:
 * - business_types (tipos de negocio: bar, casino, etc.)
 * - machines (m√°quinas instaladas en cada ubicaci√≥n)
 * - games (partidas jugadas en cada ubicaci√≥n)
 */

const databaseManager = require('../config/database');

/**
 * üèóÔ∏è CLASE MODELO PARA UBICACIONES
 * 
 * Esta clase es como un "ADMINISTRADOR DE UBICACIONES" que maneja
 * todas las operaciones relacionadas con los lugares donde est√°n las m√°quinas.
 */
class LocationModel {

    /**
     * üÜï REGISTRAR UNA NUEVA UBICACI√ìN EN EL SISTEMA
     * 
     * Cuando queremos instalar m√°quinas CYBER SAPO en un nuevo lugar:
     * 1. Validamos que todos los datos obligatorios est√©n presentes
     * 2. Verificamos que el tipo de negocio sea v√°lido
     * 3. Registramos la ubicaci√≥n en la base de datos
     * 4. Devolvemos la informaci√≥n completa de la nueva ubicaci√≥n
     * 
     * FLUJO DE DATOS:
     * Panel Admin ‚Üí Controlador ‚Üí Este Modelo ‚Üí Base de Datos
     */
    static async create(locationData) {
        console.log('üè¢ LocationModel: Registrando nueva ubicaci√≥n...');

        // üîç VALIDAR DATOS OBLIGATORIOS
        const requiredFields = ['name', 'country', 'city'];
        
        for (const field of requiredFields) {
            if (!locationData[field]) {
                throw new Error(`‚ùå Campo obligatorio faltante: ${field}`);
            }
        }

        // üè∑Ô∏è VERIFICAR QUE EL TIPO DE NEGOCIO EXISTE
        const { business_type = 'other' } = locationData;
        
        const businessTypeExists = await databaseManager.get(
            'SELECT name FROM business_types WHERE name = ? AND active = 1',
            [business_type]
        );

        if (!businessTypeExists) {
            throw new Error(`‚ùå Tipo de negocio '${business_type}' no v√°lido`);
        }

        // üìù PREPARAR DATOS CON VALORES POR DEFECTO
        const {
            name,
            country,
            city,
            address = null,
            phone = null,
            email = null,
            description = null,
            latitude = null,
            longitude = null,
            active = 1
        } = locationData;

        try {
            // üíæ INSERTAR LA UBICACI√ìN EN LA BASE DE DATOS
            const result = await databaseManager.run(`
                INSERT INTO locations (
                    name, country, city, address, phone, email, 
                    business_type, description, latitude, longitude, active
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                name, country, city, address, phone, email,
                business_type, description, latitude, longitude, active
            ]);

            console.log(`‚úÖ Ubicaci√≥n registrada: ${name} (ID: ${result.lastID}) en ${city}, ${country}`);

            // üîç OBTENER LA UBICACI√ìN COMPLETA PARA DEVOLVERLA
            const newLocation = await this.findById(result.lastID);
            return newLocation;

        } catch (error) {
            console.error('‚ùå Error registrando ubicaci√≥n:', error.message);
            throw error;
        }
    }

    /**
     * üîç BUSCAR TODAS LAS UBICACIONES CON FILTROS Y PAGINACI√ìN
     * 
     * Esta funci√≥n permite buscar ubicaciones seg√∫n diferentes criterios:
     * - Por pa√≠s espec√≠fico
     * - Por ciudad espec√≠fica
     * - Por tipo de negocio (bar, casino, etc.)
     * - Por nombre (b√∫squeda de texto)
     * - Con informaci√≥n de cu√°ntas m√°quinas tiene cada ubicaci√≥n
     * - Con estad√≠sticas de rendimiento
     */
    static async findAll(filters = {}) {
        console.log('üîç LocationModel: Buscando ubicaciones con filtros:', filters);

        const {
            country,
            city,
            business_type,
            search,
            active = 1,
            page = 1,
            limit = 20
        } = filters;

        // üèóÔ∏è CONSTRUIR LA CONSULTA SQL DIN√ÅMICAMENTE
        let whereClause = 'WHERE l.active = ?';
        let params = [active];

        if (country) {
            whereClause += ' AND l.country = ?';
            params.push(country);
        }

        if (city) {
            whereClause += ' AND l.city = ?';
            params.push(city);
        }

        if (business_type) {
            whereClause += ' AND l.business_type = ?';
            params.push(business_type);
        }

        if (search) {
            whereClause += ' AND (l.name LIKE ? OR l.address LIKE ?)';
            params.push(`%${search}%`, `%${search}%`);
        }

        // üìÑ CALCULAR PAGINACI√ìN
        const offset = (page - 1) * limit;

        try {
            // üîç CONSULTA PRINCIPAL CON INFORMACI√ìN COMPLETA
            // Unimos con business_types para obtener iconos y descripciones
            // Unimos con machines para contar cu√°ntas m√°quinas hay y sus estados
            const query = `
                SELECT 
                    l.*,
                    bt.icon as business_type_icon,
                    bt.description as business_type_description,
                    COUNT(m.id) as machine_count,
                    SUM(CASE WHEN m.status = 'available' THEN 1 ELSE 0 END) as available_machines,
                    SUM(CASE WHEN m.status = 'occupied' THEN 1 ELSE 0 END) as occupied_machines,
                    SUM(CASE WHEN m.status = 'offline' THEN 1 ELSE 0 END) as offline_machines,
                    -- Estad√≠sticas de rendimiento
                    COALESCE(SUM(m.total_games), 0) as total_games,
                    COALESCE(SUM(m.total_revenue), 0) as total_revenue,
                    COALESCE(SUM(m.total_playtime), 0) as total_playtime
                FROM locations l
                LEFT JOIN business_types bt ON l.business_type = bt.name
                LEFT JOIN machines m ON l.id = m.location_id
                ${whereClause}
                GROUP BY l.id
                ORDER BY l.name
                LIMIT ? OFFSET ?
            `;

            params.push(limit, offset);
            const locations = await databaseManager.query(query, params);

            // üìä CONTAR TOTAL PARA PAGINACI√ìN
            const countQuery = `SELECT COUNT(*) as total FROM locations l ${whereClause}`;
            const countParams = params.slice(0, -2); // Remover limit y offset
            const countResult = await databaseManager.get(countQuery, countParams);

            return {
                locations,
                pagination: {
                    page: parseInt(page),
                    limit: parseInt(limit),
                    total: countResult.total,
                    pages: Math.ceil(countResult.total / limit)
                }
            };

        } catch (error) {
            console.error('‚ùå Error buscando ubicaciones:', error.message);
            throw error;
        }
    }

    /**
     * üéØ BUSCAR UNA UBICACI√ìN ESPEC√çFICA POR ID
     * 
     * Obtiene toda la informaci√≥n detallada de una ubicaci√≥n espec√≠fica,
     * incluyendo estad√≠sticas de todas sus m√°quinas.
     */
    static async findById(locationId) {
        console.log(`üîç LocationModel: Buscando ubicaci√≥n ID: ${locationId}`);

        try {
            const query = `
                SELECT 
                    l.*,
                    bt.icon as business_type_icon,
                    bt.description as business_type_description,
                    COUNT(m.id) as machine_count,
                    SUM(CASE WHEN m.status = 'available' THEN 1 ELSE 0 END) as available_machines,
                    SUM(CASE WHEN m.status = 'occupied' THEN 1 ELSE 0 END) as occupied_machines,
                    SUM(CASE WHEN m.status = 'offline' THEN 1 ELSE 0 END) as offline_machines,
                    -- Estad√≠sticas totales
                    COALESCE(SUM(m.total_games), 0) as total_games,
                    COALESCE(SUM(m.total_revenue), 0) as total_revenue,
                    COALESCE(SUM(m.total_playtime), 0) as total_playtime,
                    -- Estad√≠sticas de los √∫ltimos 30 d√≠as
                    (SELECT COUNT(*) FROM games WHERE location_id = l.id AND started_at >= datetime('now', '-30 days')) as games_last_30_days,
                    (SELECT COALESCE(SUM(revenue), 0) FROM games WHERE location_id = l.id AND started_at >= datetime('now', '-30 days')) as revenue_last_30_days
                FROM locations l
                LEFT JOIN business_types bt ON l.business_type = bt.name
                LEFT JOIN machines m ON l.id = m.location_id
                WHERE l.id = ?
                GROUP BY l.id
            `;

            const location = await databaseManager.get(query, [locationId]);

            if (!location) {
                throw new Error(`Ubicaci√≥n con ID ${locationId} no encontrada`);
            }

            return location;

        } catch (error) {
            console.error('‚ùå Error buscando ubicaci√≥n por ID:', error.message);
            throw error;
        }
    }

    /**
     * ‚úèÔ∏è ACTUALIZAR INFORMACI√ìN DE UNA UBICACI√ìN
     * 
     * Permite modificar los datos de una ubicaci√≥n existente:
     * - Informaci√≥n de contacto (tel√©fono, email)
     * - Direcci√≥n
     * - Descripci√≥n
     * - Coordenadas GPS
     * - Estado activo/inactivo
     */
    static async update(locationId, updateData) {
        console.log(`‚úèÔ∏è LocationModel: Actualizando ubicaci√≥n ID: ${locationId}`);

        try {
            // üîç VERIFICAR QUE LA UBICACI√ìN EXISTE
            const existingLocation = await this.findById(locationId);

            // üè∑Ô∏è VERIFICAR TIPO DE NEGOCIO SI SE EST√Å ACTUALIZANDO
            if (updateData.business_type) {
                const businessTypeExists = await databaseManager.get(
                    'SELECT name FROM business_types WHERE name = ? AND active = 1',
                    [updateData.business_type]
                );

                if (!businessTypeExists) {
                    throw new Error(`‚ùå Tipo de negocio '${updateData.business_type}' no v√°lido`);
                }
            }

            // üèóÔ∏è CONSTRUIR LA CONSULTA DE ACTUALIZACI√ìN DIN√ÅMICAMENTE
            const allowedFields = ['name', 'country', 'city', 'address', 'phone', 'email', 'business_type', 'description', 'latitude', 'longitude', 'active'];
            const updates = [];
            const params = [];

            for (const [key, value] of Object.entries(updateData)) {
                if (allowedFields.includes(key) && value !== undefined) {
                    updates.push(`${key} = ?`);
                    params.push(value);
                }
            }

            if (updates.length === 0) {
                throw new Error('‚ùå No hay campos v√°lidos para actualizar');
            }

            // Agregar timestamp de actualizaci√≥n
            updates.push('updated_at = CURRENT_TIMESTAMP');
            params.push(locationId);

            // ‚úèÔ∏è EJECUTAR LA ACTUALIZACI√ìN
            const result = await databaseManager.run(
                `UPDATE locations SET ${updates.join(', ')} WHERE id = ?`,
                params
            );

            if (result.changes === 0) {
                throw new Error('No se pudo actualizar la ubicaci√≥n');
            }

            console.log(`‚úÖ Ubicaci√≥n ${existingLocation.name} actualizada exitosamente`);

            // üîç DEVOLVER LA UBICACI√ìN ACTUALIZADA
            return await this.findById(locationId);

        } catch (error) {
            console.error('‚ùå Error actualizando ubicaci√≥n:', error.message);
            throw error;
        }
    }

    /**
     * üóëÔ∏è DESACTIVAR UNA UBICACI√ìN
     * 
     * En lugar de eliminar completamente una ubicaci√≥n, la marcamos como inactiva.
     * Esto preserva el historial de partidas y estad√≠sticas.
     */
    static async deactivate(locationId) {
        console.log(`üóëÔ∏è LocationModel: Desactivando ubicaci√≥n ID: ${locationId}`);

        try {
            // üîç VERIFICAR QUE LA UBICACI√ìN EXISTE Y EST√Å ACTIVA
            const location = await this.findById(locationId);
            
            if (!location.active) {
                throw new Error('La ubicaci√≥n ya est√° desactivada');
            }

            // üé∞ VERIFICAR SI HAY M√ÅQUINAS ACTIVAS
            if (location.machine_count > 0) {
                console.log(`‚ö†Ô∏è Advertencia: La ubicaci√≥n ${location.name} tiene ${location.machine_count} m√°quinas. Considera desactivarlas primero.`);
            }

            // üóëÔ∏è MARCAR COMO INACTIVA
            await this.update(locationId, { active: 0 });

            console.log(`‚úÖ Ubicaci√≥n ${location.name} desactivada exitosamente`);

            return await this.findById(locationId);

        } catch (error) {
            console.error('‚ùå Error desactivando ubicaci√≥n:', error.message);
            throw error;
        }
    }

    /**
     * üìä OBTENER ESTAD√çSTICAS DETALLADAS DE UNA UBICACI√ìN
     * 
     * Calcula estad√≠sticas completas para una ubicaci√≥n espec√≠fica:
     * - Rendimiento de todas sus m√°quinas
     * - Tendencias de ingresos por d√≠a
     * - Distribuci√≥n de actividad por horas
     * - Tipos de juego m√°s populares
     * - Comparaci√≥n con otras ubicaciones
     */
    static async getDetailedStats(locationId, period = '30d') {
        console.log(`üìä LocationModel: Calculando estad√≠sticas detalladas para ubicaci√≥n ${locationId} (per√≠odo: ${period})`);

        // üóìÔ∏è DETERMINAR FILTRO DE FECHA
        let dateFilter = '';
        switch(period) {
            case '7d':
                dateFilter = "AND g.started_at >= datetime('now', '-7 days')";
                break;
            case '30d':
                dateFilter = "AND g.started_at >= datetime('now', '-30 days')";
                break;
            case '90d':
                dateFilter = "AND g.started_at >= datetime('now', '-90 days')";
                break;
            case '1y':
                dateFilter = "AND g.started_at >= datetime('now', '-1 year')";
                break;
            case 'all':
                dateFilter = '';
                break;
            default:
                dateFilter = "AND g.started_at >= datetime('now', '-30 days')";
        }

        try {
            // üîç VERIFICAR QUE LA UBICACI√ìN EXISTE
            const location = await this.findById(locationId);

            // üìà ESTAD√çSTICAS GENERALES DE LA UBICACI√ìN
            const generalStats = await databaseManager.get(`
                SELECT 
                    COUNT(*) as total_games,
                    COALESCE(SUM(g.revenue), 0) as total_revenue,
                    COALESCE(SUM(g.duration_seconds), 0) as total_playtime,
                    COALESCE(AVG(g.players_count), 0) as avg_players,
                    COALESCE(AVG(g.duration_seconds), 0) as avg_duration,
                    COALESCE(AVG(g.revenue), 0) as avg_revenue,
                    MIN(g.started_at) as first_game,
                    MAX(g.started_at) as last_game
                FROM games g
                WHERE g.location_id = ? ${dateFilter}
            `, [locationId]);

            // üé∞ RENDIMIENTO POR M√ÅQUINA
            const machinePerformance = await databaseManager.query(`
                SELECT 
                    m.name as machine_name,
                    COUNT(g.id) as games,
                    COALESCE(SUM(g.revenue), 0) as revenue,
                    COALESCE(SUM(g.duration_seconds), 0) as playtime,
                    COALESCE(AVG(g.players_count), 0) as avg_players
                FROM machines m
                LEFT JOIN games g ON m.id = g.machine_id ${dateFilter.replace('g.started_at', 'g.started_at')}
                WHERE m.location_id = ?
                GROUP BY m.id, m.name
                ORDER BY revenue DESC
            `, [locationId]);

            // üìÖ TENDENCIA DIARIA
            const dailyTrend = await databaseManager.query(`
                SELECT 
                    DATE(g.started_at) as date,
                    COUNT(*) as games,
                    COALESCE(SUM(g.revenue), 0) as revenue,
                    COUNT(DISTINCT g.machine_id) as active_machines
                FROM games g
                WHERE g.location_id = ? ${dateFilter}
                GROUP BY DATE(g.started_at)
                ORDER BY date
            `, [locationId]);

            // ‚è∞ DISTRIBUCI√ìN POR HORAS
            const hourlyDistribution = await databaseManager.query(`
                SELECT 
                    CAST(strftime('%H', g.started_at) as INTEGER) as hour,
                    COUNT(*) as games,
                    COALESCE(SUM(g.revenue), 0) as revenue
                FROM games g
                WHERE g.location_id = ? ${dateFilter}
                GROUP BY CAST(strftime('%H', g.started_at) as INTEGER)
                ORDER BY hour
            `, [locationId]);

            // üéÆ DISTRIBUCI√ìN POR TIPO DE JUEGO
            const gameTypeDistribution = await databaseManager.query(`
                SELECT 
                    g.game_type,
                    COUNT(*) as games,
                    COALESCE(SUM(g.revenue), 0) as revenue,
                    COALESCE(AVG(g.players_count), 0) as avg_players,
                    COALESCE(AVG(g.duration_seconds), 0) as avg_duration
                FROM games g
                WHERE g.location_id = ? ${dateFilter}
                GROUP BY g.game_type
                ORDER BY games DESC
            `, [locationId]);

            return {
                location: location,
                period: period,
                general: generalStats,
                machine_performance: machinePerformance,
                daily_trend: dailyTrend,
                hourly_distribution: hourlyDistribution,
                game_type_distribution: gameTypeDistribution
            };

        } catch (error) {
            console.error('‚ùå Error calculando estad√≠sticas detalladas de ubicaci√≥n:', error.message);
            throw error;
        }
    }

    /**
     * üåç OBTENER LISTA DE PA√çSES √öNICOS
     * 
     * Devuelve todos los pa√≠ses donde hay ubicaciones activas.
     * √ötil para filtros y formularios.
     */
    static async getCountries() {
        console.log('üåç LocationModel: Obteniendo lista de pa√≠ses...');

        try {
            const countries = await databaseManager.query(`
                SELECT DISTINCT country 
                FROM locations 
                WHERE active = 1 AND country IS NOT NULL 
                ORDER BY country
            `);

            return countries.map(row => row.country);

        } catch (error) {
            console.error('‚ùå Error obteniendo pa√≠ses:', error.message);
            throw error;
        }
    }

    /**
     * üèôÔ∏è OBTENER LISTA DE CIUDADES POR PA√çS
     * 
     * Devuelve todas las ciudades de un pa√≠s espec√≠fico donde hay ubicaciones.
     */
    static async getCitiesByCountry(country) {
        console.log(`üèôÔ∏è LocationModel: Obteniendo ciudades de ${country}...`);

        try {
            const cities = await databaseManager.query(`
                SELECT DISTINCT city 
                FROM locations 
                WHERE active = 1 AND country = ? AND city IS NOT NULL 
                ORDER BY city
            `, [country]);

            return cities.map(row => row.city);

        } catch (error) {
            console.error('‚ùå Error obteniendo ciudades:', error.message);
            throw error;
        }
    }

    /**
     * üìà OBTENER RESUMEN GENERAL DE UBICACIONES
     * 
     * Proporciona estad√≠sticas generales de todas las ubicaciones:
     * - Total de ubicaciones por pa√≠s
     * - Total por tipo de negocio
     * - Ubicaciones m√°s rentables
     * - Distribuci√≥n geogr√°fica
     */
    static async getSummary() {
        console.log('üìà LocationModel: Calculando resumen general de ubicaciones...');

        try {
            // üåç ESTAD√çSTICAS POR PA√çS
            const byCountry = await databaseManager.query(`
                SELECT 
                    country, 
                    COUNT(*) as locations,
                    SUM(
                        (SELECT COUNT(*) FROM machines WHERE location_id = l.id)
                    ) as total_machines,
                    SUM(
                        (SELECT COALESCE(SUM(total_revenue), 0) FROM machines WHERE location_id = l.id)
                    ) as total_revenue
                FROM locations l
                WHERE active = 1 AND country IS NOT NULL 
                GROUP BY country 
                ORDER BY locations DESC
            `);

            // üè¢ ESTAD√çSTICAS POR TIPO DE NEGOCIO
            const byBusinessType = await databaseManager.query(`
                SELECT 
                    l.business_type,
                    bt.icon,
                    bt.description,
                    COUNT(*) as locations,
                    SUM(
                        (SELECT COUNT(*) FROM machines WHERE location_id = l.id)
                    ) as total_machines,
                    SUM(
                        (SELECT COALESCE(SUM(total_revenue), 0) FROM machines WHERE location_id = l.id)
                    ) as total_revenue
                FROM locations l
                LEFT JOIN business_types bt ON l.business_type = bt.name
                WHERE l.active = 1 
                GROUP BY l.business_type 
                ORDER BY locations DESC
            `);

            // üèÜ TOP 10 UBICACIONES POR INGRESOS
            const topByRevenue = await databaseManager.query(`
                SELECT 
                    l.name,
                    l.city,
                    l.country,
                    l.business_type,
                    COUNT(m.id) as machine_count,
                    COALESCE(SUM(m.total_revenue), 0) as total_revenue,
                    COALESCE(SUM(m.total_games), 0) as total_games
                FROM locations l
                LEFT JOIN machines m ON l.id = m.location_id
                WHERE l.active = 1
                GROUP BY l.id
                ORDER BY total_revenue DESC
                LIMIT 10
            `);

            // üìä ESTAD√çSTICAS GENERALES
            const generalStats = await databaseManager.get(`
                SELECT 
                    COUNT(*) as total_locations,
                    COUNT(DISTINCT country) as total_countries,
                    COUNT(DISTINCT city) as total_cities,
                    (SELECT COUNT(*) FROM machines WHERE location_id IN (SELECT id FROM locations WHERE active = 1)) as total_machines,
                    (SELECT COALESCE(SUM(total_revenue), 0) FROM machines WHERE location_id IN (SELECT id FROM locations WHERE active = 1)) as total_revenue
                FROM locations
                WHERE active = 1
            `);

            return {
                general: generalStats,
                by_country: byCountry,
                by_business_type: byBusinessType,
                top_by_revenue: topByRevenue
            };

        } catch (error) {
            console.error('‚ùå Error calculando resumen de ubicaciones:', error.message);
            throw error;
        }
    }
}

// üì§ EXPORTAR EL MODELO PARA QUE OTROS ARCHIVOS LO PUEDAN USAR
module.exports = LocationModel;
