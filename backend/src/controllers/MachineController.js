/**
 * üé∞ CONTROLADOR DE M√ÅQUINAS - CYBER SAPO
 * 
 * Este archivo es como un "RECEPCIONISTA ESPECIALIZADO EN M√ÅQUINAS" que:
 * - Recibe peticiones del panel de administraci√≥n sobre m√°quinas
 * - Valida que los datos est√©n correctos
 * - Llama al modelo correspondiente para interactuar con la base de datos
 * - Devuelve respuestas formateadas al frontend
 * 
 * FLUJO DE COMUNICACI√ìN:
 * Panel Admin ‚Üí API REST ‚Üí Este Controlador ‚Üí MachineModel ‚Üí Base de Datos
 *                               ‚Üì
 * Panel Admin ‚Üê Respuesta JSON ‚Üê Este Controlador ‚Üê MachineModel ‚Üê Base de Datos
 * 
 * ENDPOINTS QUE MANEJA:
 * POST /api/machines - Registrar nueva m√°quina
 * GET /api/machines - Obtener lista de m√°quinas con filtros
 * GET /api/machines/:id - Obtener detalles de una m√°quina espec√≠fica
 * PUT /api/machines/:id/status - Cambiar estado de una m√°quina
 * GET /api/machines/:id/stats - Obtener estad√≠sticas detalladas de una m√°quina
 * GET /api/machines/summary - Obtener resumen general de todas las m√°quinas
 */

const MachineModel = require('../models/MachineModel');

/**
 * üèóÔ∏è CLASE CONTROLADOR PARA M√ÅQUINAS
 * 
 * Esta clase act√∫a como intermediario entre las peticiones HTTP
 * y la l√≥gica de negocio de las m√°quinas.
 */
class MachineController {

    /**
     * üÜï REGISTRAR UNA NUEVA M√ÅQUINA
     * 
     * Cuando se instala una nueva m√°quina CYBER SAPO:
     * 1. El panel de administraci√≥n env√≠a los datos via POST
     * 2. Este m√©todo valida los datos
     * 3. Llama al MachineModel para guardar en la base de datos
     * 4. Devuelve confirmaci√≥n al panel de administraci√≥n
     * 
     * DATOS QUE RECIBE:
     * - location_id: En qu√© ubicaci√≥n se instala (obligatorio)
     * - name: Nombre de la m√°quina (opcional, se genera autom√°ticamente)
     * - status: Estado inicial (opcional, default: 'available')
     */
    static async create(req, res) {
        console.log('üé∞ MachineController.create: Nueva m√°quina recibida');
        console.log('üìù Datos recibidos:', req.body);

        try {
            // üîç EXTRAER DATOS DEL CUERPO DE LA PETICI√ìN
            const machineData = req.body;

            // ‚úÖ VALIDACIONES B√ÅSICAS
            if (!machineData.location_id) {
                return res.status(400).json({
                    success: false,
                    error: 'location_id es obligatorio',
                    message: 'Debes especificar en qu√© ubicaci√≥n se instalar√° la m√°quina'
                });
            }

            // üî¢ VALIDAR TIPO DE DATO
            if (!Number.isInteger(machineData.location_id) || machineData.location_id <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'location_id debe ser un n√∫mero entero positivo'
                });
            }

            // üé∞ VALIDAR ESTADO SI SE PROPORCIONA
            if (machineData.status) {
                const validStatuses = ['available', 'occupied', 'offline'];
                if (!validStatuses.includes(machineData.status)) {
                    return res.status(400).json({
                        success: false,
                        error: 'Estado inv√°lido',
                        valid_statuses: validStatuses,
                        message: `El estado debe ser uno de: ${validStatuses.join(', ')}`
                    });
                }
            }

            // üíæ REGISTRAR LA M√ÅQUINA EN LA BASE DE DATOS
            console.log('üíæ Registrando m√°quina en la base de datos...');
            const newMachine = await MachineModel.create(machineData);

            // ‚úÖ RESPUESTA EXITOSA
            console.log(`‚úÖ M√°quina registrada exitosamente: ${newMachine.name} (ID: ${newMachine.id})`);
            
            res.status(201).json({
                success: true,
                message: 'M√°quina registrada exitosamente',
                data: newMachine
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en MachineController.create:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'Ubicaci√≥n no encontrada',
                    message: 'La ubicaci√≥n especificada no existe o est√° inactiva'
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudo registrar la m√°quina. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * üîç OBTENER LISTA DE M√ÅQUINAS CON FILTROS
     * 
     * Permite al panel de administraci√≥n obtener m√°quinas seg√∫n criterios:
     * - Por ubicaci√≥n espec√≠fica
     * - Por estado (disponible, ocupada, fuera de servicio)
     * - Por ciudad o pa√≠s
     * - B√∫squeda por nombre
     * - Con paginaci√≥n
     * 
     * PAR√ÅMETROS DE CONSULTA (query params):
     * - location_id: Filtrar por ubicaci√≥n
     * - status: Filtrar por estado
     * - city: Filtrar por ciudad
     * - country: Filtrar por pa√≠s
     * - search: B√∫squeda por nombre de m√°quina o ubicaci√≥n
     * - page: P√°gina actual (default: 1)
     * - limit: Elementos por p√°gina (default: 20)
     */
    static async getAll(req, res) {
        console.log('üîç MachineController.getAll: Obteniendo lista de m√°quinas');
        console.log('üìù Filtros recibidos:', req.query);

        try {
            // üîç EXTRAER PAR√ÅMETROS DE CONSULTA
            const filters = {
                location_id: req.query.location_id ? parseInt(req.query.location_id) : undefined,
                status: req.query.status,
                city: req.query.city,
                country: req.query.country,
                search: req.query.search,
                page: req.query.page ? parseInt(req.query.page) : 1,
                limit: req.query.limit ? parseInt(req.query.limit) : 20
            };

            // üî¢ VALIDAR PAR√ÅMETROS NUM√âRICOS
            if (filters.page <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'page debe ser un n√∫mero positivo'
                });
            }

            if (filters.limit <= 0 || filters.limit > 100) {
                return res.status(400).json({
                    success: false,
                    error: 'limit debe ser un n√∫mero entre 1 y 100'
                });
            }

            // üé∞ VALIDAR ESTADO SI SE PROPORCIONA
            if (filters.status) {
                const validStatuses = ['available', 'occupied', 'offline'];
                if (!validStatuses.includes(filters.status)) {
                    return res.status(400).json({
                        success: false,
                        error: 'Estado inv√°lido',
                        valid_statuses: validStatuses
                    });
                }
            }

            // üîç OBTENER M√ÅQUINAS DE LA BASE DE DATOS
            console.log('üîç Buscando m√°quinas con filtros:', filters);
            const result = await MachineModel.findAll(filters);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: `${result.machines.length} m√°quinas encontradas`,
                data: result.machines,
                pagination: result.pagination,
                filters: filters
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en MachineController.getAll:', error.message);
            
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor',
                message: 'No se pudieron obtener las m√°quinas. Int√©ntalo de nuevo.',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }

    /**
     * üéØ OBTENER UNA M√ÅQUINA ESPEC√çFICA POR ID
     * 
     * Devuelve todos los detalles de una m√°quina espec√≠fica,
     * incluyendo informaci√≥n de ubicaci√≥n y estad√≠sticas calculadas.
     */
    static async getById(req, res) {
        console.log('üéØ MachineController.getById: Obteniendo m√°quina espec√≠fica');

        try {
            // üîç EXTRAER ID DE LOS PAR√ÅMETROS DE LA URL
            const machineId = parseInt(req.params.id);

            // üî¢ VALIDAR ID
            if (!machineId || machineId <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'ID de m√°quina inv√°lido',
                    message: 'El ID debe ser un n√∫mero entero positivo'
                });
            }

            // üîç BUSCAR LA M√ÅQUINA EN LA BASE DE DATOS
            console.log(`üîç Buscando m√°quina con ID: ${machineId}`);
            const machine = await MachineModel.findById(machineId);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: 'M√°quina encontrada',
                data: machine
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en MachineController.getById:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'M√°quina no encontrada',
                    message: `No existe una m√°quina con ID ${req.params.id}`
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudo obtener la m√°quina. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * üîÑ CAMBIAR EL ESTADO DE UNA M√ÅQUINA
     * 
     * Permite cambiar el estado de una m√°quina entre:
     * - 'available' (disponible para jugar)
     * - 'occupied' (alguien est√° jugando)
     * - 'offline' (fuera de servicio)
     * 
     * USOS T√çPICOS:
     * - Cuando empieza una partida: available ‚Üí occupied
     * - Cuando termina una partida: occupied ‚Üí available
     * - Para mantenimiento: cualquier estado ‚Üí offline
     * - Despu√©s de mantenimiento: offline ‚Üí available
     */
    static async updateStatus(req, res) {
        console.log('üîÑ MachineController.updateStatus: Cambiando estado de m√°quina');

        try {
            // üîç EXTRAER PAR√ÅMETROS
            const machineId = parseInt(req.params.id);
            const { status } = req.body;

            // üî¢ VALIDAR ID
            if (!machineId || machineId <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'ID de m√°quina inv√°lido'
                });
            }

            // ‚úÖ VALIDAR ESTADO
            if (!status) {
                return res.status(400).json({
                    success: false,
                    error: 'Estado es obligatorio',
                    message: 'Debes especificar el nuevo estado de la m√°quina'
                });
            }

            const validStatuses = ['available', 'occupied', 'offline'];
            if (!validStatuses.includes(status)) {
                return res.status(400).json({
                    success: false,
                    error: 'Estado inv√°lido',
                    valid_statuses: validStatuses,
                    message: `El estado debe ser uno de: ${validStatuses.join(', ')}`
                });
            }

            // üîÑ ACTUALIZAR EL ESTADO EN LA BASE DE DATOS
            console.log(`üîÑ Cambiando estado de m√°quina ${machineId} a '${status}'`);
            const updatedMachine = await MachineModel.updateStatus(machineId, status);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: `Estado de m√°quina actualizado a '${status}'`,
                data: updatedMachine,
                previous_status: updatedMachine.status !== status ? 'unknown' : status,
                new_status: status
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en MachineController.updateStatus:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'M√°quina no encontrada',
                    message: `No existe una m√°quina con ID ${req.params.id}`
                });
            } else if (error.message.includes('inv√°lido')) {
                res.status(400).json({
                    success: false,
                    error: 'Estado inv√°lido',
                    message: error.message
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudo actualizar el estado. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * üìä OBTENER ESTAD√çSTICAS DETALLADAS DE UNA M√ÅQUINA
     * 
     * Calcula y devuelve estad√≠sticas completas para una m√°quina espec√≠fica:
     * - Estad√≠sticas generales (totales, promedios)
     * - Tendencias diarias de ingresos
     * - Distribuci√≥n por horas del d√≠a
     * - Distribuci√≥n por d√≠as de la semana
     * - Tipos de juego m√°s populares
     * - Partidas m√°s largas
     * - Partidas recientes
     * 
     * PAR√ÅMETROS DE CONSULTA:
     * - period: Per√≠odo de an√°lisis ('7d', '30d', '90d', '1y', 'all')
     */
    static async getStats(req, res) {
        console.log('üìä MachineController.getStats: Calculando estad√≠sticas de m√°quina');

        try {
            // üîç EXTRAER PAR√ÅMETROS
            const machineId = parseInt(req.params.id);
            const period = req.query.period || '30d';

            // üî¢ VALIDAR ID
            if (!machineId || machineId <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'ID de m√°quina inv√°lido'
                });
            }

            // üìÖ VALIDAR PER√çODO
            const validPeriods = ['7d', '30d', '90d', '1y', 'all'];
            if (!validPeriods.includes(period)) {
                return res.status(400).json({
                    success: false,
                    error: 'Per√≠odo inv√°lido',
                    valid_periods: validPeriods,
                    message: `El per√≠odo debe ser uno de: ${validPeriods.join(', ')}`
                });
            }

            // üìä CALCULAR ESTAD√çSTICAS DETALLADAS
            console.log(`üìä Calculando estad√≠sticas para m√°quina ${machineId} (per√≠odo: ${period})`);
            const stats = await MachineModel.getDetailedStats(machineId, period);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: 'Estad√≠sticas calculadas exitosamente',
                data: stats
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en MachineController.getStats:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'M√°quina no encontrada',
                    message: `No existe una m√°quina con ID ${req.params.id}`
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudieron calcular las estad√≠sticas. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * üìà OBTENER RESUMEN GENERAL DE TODAS LAS M√ÅQUINAS
     * 
     * Proporciona un resumen general del estado de todas las m√°quinas:
     * - Cu√°ntas est√°n disponibles, ocupadas, fuera de servicio
     * - Totales generales de ingresos y partidas
     * - Top 5 m√°quinas m√°s rentables
     * - Top 5 m√°quinas con m√°s partidas
     */
    static async getSummary(req, res) {
        console.log('üìà MachineController.getSummary: Calculando resumen general');

        try {
            // üìä OBTENER RESUMEN DE LA BASE DE DATOS
            console.log('üìä Calculando resumen general de m√°quinas...');
            const summary = await MachineModel.getSummary();

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: 'Resumen calculado exitosamente',
                data: summary
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en MachineController.getSummary:', error.message);
            
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor',
                message: 'No se pudo calcular el resumen. Int√©ntalo de nuevo.',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }

    /**
     * üîß OBTENER ESTADO EN TIEMPO REAL DE UNA M√ÅQUINA
     * 
     * Devuelve el estado actual de una m√°quina espec√≠fica.
     * √ötil para el frontend del juego para saber si puede empezar una partida.
     */
    static async getStatus(req, res) {
        console.log('üîß MachineController.getStatus: Obteniendo estado de m√°quina');

        try {
            // üîç EXTRAER ID
            const machineId = parseInt(req.params.id);

            // üî¢ VALIDAR ID
            if (!machineId || machineId <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'ID de m√°quina inv√°lido'
                });
            }

            // üîç OBTENER INFORMACI√ìN B√ÅSICA DE LA M√ÅQUINA
            const machine = await MachineModel.findById(machineId);

            // ‚úÖ RESPUESTA EXITOSA CON INFORMACI√ìN M√çNIMA
            res.json({
                success: true,
                message: 'Estado obtenido exitosamente',
                data: {
                    id: machine.id,
                    name: machine.name,
                    status: machine.status,
                    location_name: machine.location_name,
                    last_game_at: machine.last_game_at,
                    available: machine.status === 'available'
                }
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en MachineController.getStatus:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'M√°quina no encontrada',
                    message: `No existe una m√°quina con ID ${req.params.id}`
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudo obtener el estado. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }
}

// üì§ EXPORTAR EL CONTROLADOR PARA QUE LAS RUTAS LO PUEDAN USAR
module.exports = MachineController;
