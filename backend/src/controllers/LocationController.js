/**
 * üè¢ CONTROLADOR DE UBICACIONES - CYBER SAPO
 * 
 * Este archivo es como un "RECEPCIONISTA ESPECIALIZADO EN UBICACIONES" que:
 * - Recibe peticiones del panel de administraci√≥n sobre ubicaciones
 * - Valida que los datos est√©n correctos
 * - Llama al modelo correspondiente para interactuar con la base de datos
 * - Devuelve respuestas formateadas al frontend
 * 
 * FLUJO DE COMUNICACI√ìN:
 * Panel Admin ‚Üí API REST ‚Üí Este Controlador ‚Üí LocationModel ‚Üí Base de Datos
 *                               ‚Üì
 * Panel Admin ‚Üê Respuesta JSON ‚Üê Este Controlador ‚Üê LocationModel ‚Üê Base de Datos
 * 
 * ENDPOINTS QUE MANEJA:
 * POST /api/locations - Registrar nueva ubicaci√≥n
 * GET /api/locations - Obtener lista de ubicaciones con filtros
 * GET /api/locations/:id - Obtener detalles de una ubicaci√≥n espec√≠fica
 * PUT /api/locations/:id - Actualizar informaci√≥n de una ubicaci√≥n
 * DELETE /api/locations/:id - Desactivar una ubicaci√≥n
 * GET /api/locations/:id/stats - Obtener estad√≠sticas detalladas de una ubicaci√≥n
 * GET /api/locations/summary - Obtener resumen general de todas las ubicaciones
 * GET /api/locations/countries - Obtener lista de pa√≠ses
 * GET /api/locations/cities - Obtener lista de ciudades por pa√≠s
 */

const LocationModel = require('../models/LocationModel');

/**
 * üèóÔ∏è CLASE CONTROLADOR PARA UBICACIONES
 * 
 * Esta clase act√∫a como intermediario entre las peticiones HTTP
 * y la l√≥gica de negocio de las ubicaciones.
 */
class LocationController {

    /**
     * üÜï REGISTRAR UNA NUEVA UBICACI√ìN
     * 
     * Cuando se quiere instalar m√°quinas CYBER SAPO en un nuevo lugar:
     * 1. El panel de administraci√≥n env√≠a los datos via POST
     * 2. Este m√©todo valida los datos
     * 3. Llama al LocationModel para guardar en la base de datos
     * 4. Devuelve confirmaci√≥n al panel de administraci√≥n
     * 
     * DATOS QUE RECIBE:
     * - name: Nombre del lugar (obligatorio)
     * - country: Pa√≠s (obligatorio)
     * - city: Ciudad (obligatorio)
     * - address: Direcci√≥n (opcional)
     * - phone: Tel√©fono (opcional)
     * - email: Email (opcional)
     * - business_type: Tipo de negocio (opcional, default: 'other')
     * - description: Descripci√≥n (opcional)
     * - latitude: Coordenada GPS (opcional)
     * - longitude: Coordenada GPS (opcional)
     */
    static async create(req, res) {
        console.log('üè¢ LocationController.create: Nueva ubicaci√≥n recibida');
        console.log('üìù Datos recibidos:', req.body);

        try {
            // üîç EXTRAER DATOS DEL CUERPO DE LA PETICI√ìN
            const locationData = req.body;

            // ‚úÖ VALIDACIONES B√ÅSICAS
            const requiredFields = ['name', 'country', 'city'];
            const missingFields = requiredFields.filter(field => !locationData[field]);

            if (missingFields.length > 0) {
                console.log('‚ùå Campos faltantes:', missingFields);
                return res.status(400).json({
                    success: false,
                    error: 'Campos obligatorios faltantes',
                    missing_fields: missingFields,
                    message: `Los siguientes campos son obligatorios: ${missingFields.join(', ')}`
                });
            }

            // üìß VALIDAR EMAIL SI SE PROPORCIONA
            if (locationData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(locationData.email)) {
                return res.status(400).json({
                    success: false,
                    error: 'Formato de email inv√°lido'
                });
            }

            // üåç VALIDAR COORDENADAS GPS SI SE PROPORCIONAN
            if (locationData.latitude !== undefined) {
                const lat = parseFloat(locationData.latitude);
                if (isNaN(lat) || lat < -90 || lat > 90) {
                    return res.status(400).json({
                        success: false,
                        error: 'latitude debe ser un n√∫mero entre -90 y 90'
                    });
                }
                locationData.latitude = lat;
            }

            if (locationData.longitude !== undefined) {
                const lng = parseFloat(locationData.longitude);
                if (isNaN(lng) || lng < -180 || lng > 180) {
                    return res.status(400).json({
                        success: false,
                        error: 'longitude debe ser un n√∫mero entre -180 y 180'
                    });
                }
                locationData.longitude = lng;
            }

            // üíæ REGISTRAR LA UBICACI√ìN EN LA BASE DE DATOS
            console.log('üíæ Registrando ubicaci√≥n en la base de datos...');
            const newLocation = await LocationModel.create(locationData);

            // ‚úÖ RESPUESTA EXITOSA
            console.log(`‚úÖ Ubicaci√≥n registrada exitosamente: ${newLocation.name} (ID: ${newLocation.id})`);
            
            res.status(201).json({
                success: true,
                message: 'Ubicaci√≥n registrada exitosamente',
                data: newLocation
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.create:', error.message);
            
            if (error.message.includes('no v√°lido')) {
                res.status(400).json({
                    success: false,
                    error: 'Tipo de negocio inv√°lido',
                    message: error.message
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudo registrar la ubicaci√≥n. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * üîç OBTENER LISTA DE UBICACIONES CON FILTROS
     * 
     * Permite al panel de administraci√≥n obtener ubicaciones seg√∫n criterios:
     * - Por pa√≠s espec√≠fico
     * - Por ciudad espec√≠fica
     * - Por tipo de negocio
     * - B√∫squeda por nombre
     * - Solo activas o incluir inactivas
     * - Con paginaci√≥n
     * 
     * PAR√ÅMETROS DE CONSULTA (query params):
     * - country: Filtrar por pa√≠s
     * - city: Filtrar por ciudad
     * - business_type: Filtrar por tipo de negocio
     * - search: B√∫squeda por nombre o direcci√≥n
     * - active: Solo activas (1) o todas (0) (default: 1)
     * - page: P√°gina actual (default: 1)
     * - limit: Elementos por p√°gina (default: 20)
     */
    static async getAll(req, res) {
        console.log('üîç LocationController.getAll: Obteniendo lista de ubicaciones');
        console.log('üìù Filtros recibidos:', req.query);

        try {
            // üîç EXTRAER PAR√ÅMETROS DE CONSULTA
            const filters = {
                country: req.query.country,
                city: req.query.city,
                business_type: req.query.business_type,
                search: req.query.search,
                active: req.query.active !== undefined ? parseInt(req.query.active) : 1,
                page: req.query.page ? parseInt(req.query.page) : 1,
                limit: req.query.limit ? parseInt(req.query.limit) : 20
            };

            // üî¢ VALIDAR PAR√ÅMETROS NUM√âRICOS
            if (filters.page <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'page debe ser un n√∫mero positivo'
                });
            }

            if (filters.limit <= 0 || filters.limit > 100) {
                return res.status(400).json({
                    success: false,
                    error: 'limit debe ser un n√∫mero entre 1 y 100'
                });
            }

            if (filters.active !== 0 && filters.active !== 1) {
                return res.status(400).json({
                    success: false,
                    error: 'active debe ser 0 o 1'
                });
            }

            // üîç OBTENER UBICACIONES DE LA BASE DE DATOS
            console.log('üîç Buscando ubicaciones con filtros:', filters);
            const result = await LocationModel.findAll(filters);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: `${result.locations.length} ubicaciones encontradas`,
                data: result.locations,
                pagination: result.pagination,
                filters: filters
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.getAll:', error.message);
            
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor',
                message: 'No se pudieron obtener las ubicaciones. Int√©ntalo de nuevo.',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }

    /**
     * üéØ OBTENER UNA UBICACI√ìN ESPEC√çFICA POR ID
     * 
     * Devuelve todos los detalles de una ubicaci√≥n espec√≠fica,
     * incluyendo estad√≠sticas de todas sus m√°quinas.
     */
    static async getById(req, res) {
        console.log('üéØ LocationController.getById: Obteniendo ubicaci√≥n espec√≠fica');

        try {
            // üîç EXTRAER ID DE LOS PAR√ÅMETROS DE LA URL
            const locationId = parseInt(req.params.id);

            // üî¢ VALIDAR ID
            if (!locationId || locationId <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'ID de ubicaci√≥n inv√°lido',
                    message: 'El ID debe ser un n√∫mero entero positivo'
                });
            }

            // üîç BUSCAR LA UBICACI√ìN EN LA BASE DE DATOS
            console.log(`üîç Buscando ubicaci√≥n con ID: ${locationId}`);
            const location = await LocationModel.findById(locationId);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: 'Ubicaci√≥n encontrada',
                data: location
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.getById:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'Ubicaci√≥n no encontrada',
                    message: `No existe una ubicaci√≥n con ID ${req.params.id}`
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudo obtener la ubicaci√≥n. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * ‚úèÔ∏è ACTUALIZAR INFORMACI√ìN DE UNA UBICACI√ìN
     * 
     * Permite modificar los datos de una ubicaci√≥n existente.
     * Solo se actualizan los campos que se env√≠an en la petici√≥n.
     */
    static async update(req, res) {
        console.log('‚úèÔ∏è LocationController.update: Actualizando ubicaci√≥n');

        try {
            // üîç EXTRAER PAR√ÅMETROS
            const locationId = parseInt(req.params.id);
            const updateData = req.body;

            // üî¢ VALIDAR ID
            if (!locationId || locationId <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'ID de ubicaci√≥n inv√°lido'
                });
            }

            // ‚úÖ VALIDAR DATOS SI SE PROPORCIONAN
            if (updateData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(updateData.email)) {
                return res.status(400).json({
                    success: false,
                    error: 'Formato de email inv√°lido'
                });
            }

            if (updateData.latitude !== undefined) {
                const lat = parseFloat(updateData.latitude);
                if (isNaN(lat) || lat < -90 || lat > 90) {
                    return res.status(400).json({
                        success: false,
                        error: 'latitude debe ser un n√∫mero entre -90 y 90'
                    });
                }
                updateData.latitude = lat;
            }

            if (updateData.longitude !== undefined) {
                const lng = parseFloat(updateData.longitude);
                if (isNaN(lng) || lng < -180 || lng > 180) {
                    return res.status(400).json({
                        success: false,
                        error: 'longitude debe ser un n√∫mero entre -180 y 180'
                    });
                }
                updateData.longitude = lng;
            }

            // ‚úèÔ∏è ACTUALIZAR EN LA BASE DE DATOS
            console.log(`‚úèÔ∏è Actualizando ubicaci√≥n ${locationId} con datos:`, updateData);
            const updatedLocation = await LocationModel.update(locationId, updateData);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: 'Ubicaci√≥n actualizada exitosamente',
                data: updatedLocation
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.update:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'Ubicaci√≥n no encontrada',
                    message: `No existe una ubicaci√≥n con ID ${req.params.id}`
                });
            } else if (error.message.includes('no v√°lido')) {
                res.status(400).json({
                    success: false,
                    error: 'Datos inv√°lidos',
                    message: error.message
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudo actualizar la ubicaci√≥n. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * üóëÔ∏è DESACTIVAR UNA UBICACI√ìN
     * 
     * En lugar de eliminar completamente una ubicaci√≥n, la marcamos como inactiva.
     * Esto preserva el historial de partidas y estad√≠sticas.
     */
    static async deactivate(req, res) {
        console.log('üóëÔ∏è LocationController.deactivate: Desactivando ubicaci√≥n');

        try {
            // üîç EXTRAER ID
            const locationId = parseInt(req.params.id);

            // üî¢ VALIDAR ID
            if (!locationId || locationId <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'ID de ubicaci√≥n inv√°lido'
                });
            }

            // üóëÔ∏è DESACTIVAR EN LA BASE DE DATOS
            console.log(`üóëÔ∏è Desactivando ubicaci√≥n ${locationId}`);
            const deactivatedLocation = await LocationModel.deactivate(locationId);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: 'Ubicaci√≥n desactivada exitosamente',
                data: deactivatedLocation,
                warning: deactivatedLocation.machine_count > 0 ? 
                    `Esta ubicaci√≥n tiene ${deactivatedLocation.machine_count} m√°quinas. Considera desactivarlas tambi√©n.` : 
                    null
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.deactivate:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'Ubicaci√≥n no encontrada',
                    message: `No existe una ubicaci√≥n con ID ${req.params.id}`
                });
            } else if (error.message.includes('ya est√° desactivada')) {
                res.status(400).json({
                    success: false,
                    error: 'Ubicaci√≥n ya desactivada',
                    message: 'Esta ubicaci√≥n ya est√° desactivada'
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudo desactivar la ubicaci√≥n. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * üìä OBTENER ESTAD√çSTICAS DETALLADAS DE UNA UBICACI√ìN
     * 
     * Calcula y devuelve estad√≠sticas completas para una ubicaci√≥n espec√≠fica:
     * - Rendimiento de todas sus m√°quinas
     * - Tendencias de ingresos por d√≠a
     * - Distribuci√≥n de actividad por horas
     * - Tipos de juego m√°s populares
     * 
     * PAR√ÅMETROS DE CONSULTA:
     * - period: Per√≠odo de an√°lisis ('7d', '30d', '90d', '1y', 'all')
     */
    static async getStats(req, res) {
        console.log('üìä LocationController.getStats: Calculando estad√≠sticas de ubicaci√≥n');

        try {
            // üîç EXTRAER PAR√ÅMETROS
            const locationId = parseInt(req.params.id);
            const period = req.query.period || '30d';

            // üî¢ VALIDAR ID
            if (!locationId || locationId <= 0) {
                return res.status(400).json({
                    success: false,
                    error: 'ID de ubicaci√≥n inv√°lido'
                });
            }

            // üìÖ VALIDAR PER√çODO
            const validPeriods = ['7d', '30d', '90d', '1y', 'all'];
            if (!validPeriods.includes(period)) {
                return res.status(400).json({
                    success: false,
                    error: 'Per√≠odo inv√°lido',
                    valid_periods: validPeriods,
                    message: `El per√≠odo debe ser uno de: ${validPeriods.join(', ')}`
                });
            }

            // üìä CALCULAR ESTAD√çSTICAS DETALLADAS
            console.log(`üìä Calculando estad√≠sticas para ubicaci√≥n ${locationId} (per√≠odo: ${period})`);
            const stats = await LocationModel.getDetailedStats(locationId, period);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: 'Estad√≠sticas calculadas exitosamente',
                data: stats
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.getStats:', error.message);
            
            if (error.message.includes('no encontrada')) {
                res.status(404).json({
                    success: false,
                    error: 'Ubicaci√≥n no encontrada',
                    message: `No existe una ubicaci√≥n con ID ${req.params.id}`
                });
            } else {
                res.status(500).json({
                    success: false,
                    error: 'Error interno del servidor',
                    message: 'No se pudieron calcular las estad√≠sticas. Int√©ntalo de nuevo.',
                    details: process.env.NODE_ENV === 'development' ? error.message : undefined
                });
            }
        }
    }

    /**
     * üìà OBTENER RESUMEN GENERAL DE TODAS LAS UBICACIONES
     * 
     * Proporciona estad√≠sticas generales de todas las ubicaciones:
     * - Total de ubicaciones por pa√≠s
     * - Total por tipo de negocio
     * - Top 10 ubicaciones m√°s rentables
     * - Distribuci√≥n geogr√°fica
     */
    static async getSummary(req, res) {
        console.log('üìà LocationController.getSummary: Calculando resumen general');

        try {
            // üìä OBTENER RESUMEN DE LA BASE DE DATOS
            console.log('üìä Calculando resumen general de ubicaciones...');
            const summary = await LocationModel.getSummary();

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: 'Resumen calculado exitosamente',
                data: summary
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.getSummary:', error.message);
            
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor',
                message: 'No se pudo calcular el resumen. Int√©ntalo de nuevo.',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }

    /**
     * üåç OBTENER LISTA DE PA√çSES
     * 
     * Devuelve todos los pa√≠ses donde hay ubicaciones activas.
     * √ötil para filtros y formularios.
     */
    static async getCountries(req, res) {
        console.log('üåç LocationController.getCountries: Obteniendo lista de pa√≠ses');

        try {
            // üåç OBTENER PA√çSES DE LA BASE DE DATOS
            const countries = await LocationModel.getCountries();

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: `${countries.length} pa√≠ses encontrados`,
                data: countries
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.getCountries:', error.message);
            
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor',
                message: 'No se pudieron obtener los pa√≠ses. Int√©ntalo de nuevo.',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }

    /**
     * üèôÔ∏è OBTENER LISTA DE CIUDADES POR PA√çS
     * 
     * Devuelve todas las ciudades de un pa√≠s espec√≠fico donde hay ubicaciones.
     * 
     * PAR√ÅMETROS DE CONSULTA:
     * - country: Pa√≠s del cual obtener las ciudades (obligatorio)
     */
    static async getCities(req, res) {
        console.log('üèôÔ∏è LocationController.getCities: Obteniendo lista de ciudades');

        try {
            // üîç EXTRAER PAR√ÅMETRO
            const { country } = req.query;

            // ‚úÖ VALIDAR PA√çS
            if (!country) {
                return res.status(400).json({
                    success: false,
                    error: 'Par√°metro country es obligatorio',
                    message: 'Debes especificar el pa√≠s para obtener sus ciudades'
                });
            }

            // üèôÔ∏è OBTENER CIUDADES DE LA BASE DE DATOS
            console.log(`üèôÔ∏è Obteniendo ciudades de ${country}...`);
            const cities = await LocationModel.getCitiesByCountry(country);

            // ‚úÖ RESPUESTA EXITOSA
            res.json({
                success: true,
                message: `${cities.length} ciudades encontradas en ${country}`,
                data: cities,
                country: country
            });

        } catch (error) {
            // ‚ùå MANEJO DE ERRORES
            console.error('‚ùå Error en LocationController.getCities:', error.message);
            
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor',
                message: 'No se pudieron obtener las ciudades. Int√©ntalo de nuevo.',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }
}

// üì§ EXPORTAR EL CONTROLADOR PARA QUE LAS RUTAS LO PUEDAN USAR
module.exports = LocationController;
